// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"toucan-leaderboard/ent/tgocache"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TGoCacheCreate is the builder for creating a TGoCache entity.
type TGoCacheCreate struct {
	config
	mutation *TGoCacheMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCacheKey sets the "cache_key" field.
func (tcc *TGoCacheCreate) SetCacheKey(s string) *TGoCacheCreate {
	tcc.mutation.SetCacheKey(s)
	return tcc
}

// SetCacheValue sets the "cache_value" field.
func (tcc *TGoCacheCreate) SetCacheValue(s string) *TGoCacheCreate {
	tcc.mutation.SetCacheValue(s)
	return tcc
}

// SetNillableCacheValue sets the "cache_value" field if the given value is not nil.
func (tcc *TGoCacheCreate) SetNillableCacheValue(s *string) *TGoCacheCreate {
	if s != nil {
		tcc.SetCacheValue(*s)
	}
	return tcc
}

// SetMtime sets the "mtime" field.
func (tcc *TGoCacheCreate) SetMtime(t time.Time) *TGoCacheCreate {
	tcc.mutation.SetMtime(t)
	return tcc
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (tcc *TGoCacheCreate) SetNillableMtime(t *time.Time) *TGoCacheCreate {
	if t != nil {
		tcc.SetMtime(*t)
	}
	return tcc
}

// SetCtime sets the "ctime" field.
func (tcc *TGoCacheCreate) SetCtime(t time.Time) *TGoCacheCreate {
	tcc.mutation.SetCtime(t)
	return tcc
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (tcc *TGoCacheCreate) SetNillableCtime(t *time.Time) *TGoCacheCreate {
	if t != nil {
		tcc.SetCtime(*t)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TGoCacheCreate) SetID(u uint64) *TGoCacheCreate {
	tcc.mutation.SetID(u)
	return tcc
}

// Mutation returns the TGoCacheMutation object of the builder.
func (tcc *TGoCacheCreate) Mutation() *TGoCacheMutation {
	return tcc.mutation
}

// Save creates the TGoCache in the database.
func (tcc *TGoCacheCreate) Save(ctx context.Context) (*TGoCache, error) {
	var (
		err  error
		node *TGoCache
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TGoCacheMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TGoCache)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TGoCacheMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TGoCacheCreate) SaveX(ctx context.Context) *TGoCache {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TGoCacheCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TGoCacheCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TGoCacheCreate) defaults() {
	if _, ok := tcc.mutation.CacheValue(); !ok {
		v := tgocache.DefaultCacheValue
		tcc.mutation.SetCacheValue(v)
	}
	if _, ok := tcc.mutation.Mtime(); !ok {
		v := tgocache.DefaultMtime()
		tcc.mutation.SetMtime(v)
	}
	if _, ok := tcc.mutation.Ctime(); !ok {
		v := tgocache.DefaultCtime()
		tcc.mutation.SetCtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TGoCacheCreate) check() error {
	if _, ok := tcc.mutation.CacheKey(); !ok {
		return &ValidationError{Name: "cache_key", err: errors.New(`ent: missing required field "TGoCache.cache_key"`)}
	}
	if _, ok := tcc.mutation.CacheValue(); !ok {
		return &ValidationError{Name: "cache_value", err: errors.New(`ent: missing required field "TGoCache.cache_value"`)}
	}
	if _, ok := tcc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "TGoCache.mtime"`)}
	}
	if _, ok := tcc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "TGoCache.ctime"`)}
	}
	return nil
}

func (tcc *TGoCacheCreate) sqlSave(ctx context.Context) (*TGoCache, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tcc *TGoCacheCreate) createSpec() (*TGoCache, *sqlgraph.CreateSpec) {
	var (
		_node = &TGoCache{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tgocache.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tgocache.FieldID,
			},
		}
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.CacheKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgocache.FieldCacheKey,
		})
		_node.CacheKey = value
	}
	if value, ok := tcc.mutation.CacheValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgocache.FieldCacheValue,
		})
		_node.CacheValue = value
	}
	if value, ok := tcc.mutation.Mtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgocache.FieldMtime,
		})
		_node.Mtime = value
	}
	if value, ok := tcc.mutation.Ctime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgocache.FieldCtime,
		})
		_node.Ctime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TGoCache.Create().
//		SetCacheKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TGoCacheUpsert) {
//			SetCacheKey(v+v).
//		}).
//		Exec(ctx)
func (tcc *TGoCacheCreate) OnConflict(opts ...sql.ConflictOption) *TGoCacheUpsertOne {
	tcc.conflict = opts
	return &TGoCacheUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TGoCache.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TGoCacheCreate) OnConflictColumns(columns ...string) *TGoCacheUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TGoCacheUpsertOne{
		create: tcc,
	}
}

type (
	// TGoCacheUpsertOne is the builder for "upsert"-ing
	//  one TGoCache node.
	TGoCacheUpsertOne struct {
		create *TGoCacheCreate
	}

	// TGoCacheUpsert is the "OnConflict" setter.
	TGoCacheUpsert struct {
		*sql.UpdateSet
	}
)

// SetCacheKey sets the "cache_key" field.
func (u *TGoCacheUpsert) SetCacheKey(v string) *TGoCacheUpsert {
	u.Set(tgocache.FieldCacheKey, v)
	return u
}

// UpdateCacheKey sets the "cache_key" field to the value that was provided on create.
func (u *TGoCacheUpsert) UpdateCacheKey() *TGoCacheUpsert {
	u.SetExcluded(tgocache.FieldCacheKey)
	return u
}

// SetCacheValue sets the "cache_value" field.
func (u *TGoCacheUpsert) SetCacheValue(v string) *TGoCacheUpsert {
	u.Set(tgocache.FieldCacheValue, v)
	return u
}

// UpdateCacheValue sets the "cache_value" field to the value that was provided on create.
func (u *TGoCacheUpsert) UpdateCacheValue() *TGoCacheUpsert {
	u.SetExcluded(tgocache.FieldCacheValue)
	return u
}

// SetMtime sets the "mtime" field.
func (u *TGoCacheUpsert) SetMtime(v time.Time) *TGoCacheUpsert {
	u.Set(tgocache.FieldMtime, v)
	return u
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *TGoCacheUpsert) UpdateMtime() *TGoCacheUpsert {
	u.SetExcluded(tgocache.FieldMtime)
	return u
}

// SetCtime sets the "ctime" field.
func (u *TGoCacheUpsert) SetCtime(v time.Time) *TGoCacheUpsert {
	u.Set(tgocache.FieldCtime, v)
	return u
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *TGoCacheUpsert) UpdateCtime() *TGoCacheUpsert {
	u.SetExcluded(tgocache.FieldCtime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TGoCache.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tgocache.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TGoCacheUpsertOne) UpdateNewValues() *TGoCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tgocache.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TGoCache.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TGoCacheUpsertOne) Ignore() *TGoCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TGoCacheUpsertOne) DoNothing() *TGoCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TGoCacheCreate.OnConflict
// documentation for more info.
func (u *TGoCacheUpsertOne) Update(set func(*TGoCacheUpsert)) *TGoCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TGoCacheUpsert{UpdateSet: update})
	}))
	return u
}

// SetCacheKey sets the "cache_key" field.
func (u *TGoCacheUpsertOne) SetCacheKey(v string) *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetCacheKey(v)
	})
}

// UpdateCacheKey sets the "cache_key" field to the value that was provided on create.
func (u *TGoCacheUpsertOne) UpdateCacheKey() *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateCacheKey()
	})
}

// SetCacheValue sets the "cache_value" field.
func (u *TGoCacheUpsertOne) SetCacheValue(v string) *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetCacheValue(v)
	})
}

// UpdateCacheValue sets the "cache_value" field to the value that was provided on create.
func (u *TGoCacheUpsertOne) UpdateCacheValue() *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateCacheValue()
	})
}

// SetMtime sets the "mtime" field.
func (u *TGoCacheUpsertOne) SetMtime(v time.Time) *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *TGoCacheUpsertOne) UpdateMtime() *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateMtime()
	})
}

// SetCtime sets the "ctime" field.
func (u *TGoCacheUpsertOne) SetCtime(v time.Time) *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *TGoCacheUpsertOne) UpdateCtime() *TGoCacheUpsertOne {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateCtime()
	})
}

// Exec executes the query.
func (u *TGoCacheUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TGoCacheCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TGoCacheUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TGoCacheUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TGoCacheUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TGoCacheCreateBulk is the builder for creating many TGoCache entities in bulk.
type TGoCacheCreateBulk struct {
	config
	builders []*TGoCacheCreate
	conflict []sql.ConflictOption
}

// Save creates the TGoCache entities in the database.
func (tccb *TGoCacheCreateBulk) Save(ctx context.Context) ([]*TGoCache, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TGoCache, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TGoCacheMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TGoCacheCreateBulk) SaveX(ctx context.Context) []*TGoCache {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TGoCacheCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TGoCacheCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TGoCache.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TGoCacheUpsert) {
//			SetCacheKey(v+v).
//		}).
//		Exec(ctx)
func (tccb *TGoCacheCreateBulk) OnConflict(opts ...sql.ConflictOption) *TGoCacheUpsertBulk {
	tccb.conflict = opts
	return &TGoCacheUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TGoCache.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TGoCacheCreateBulk) OnConflictColumns(columns ...string) *TGoCacheUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TGoCacheUpsertBulk{
		create: tccb,
	}
}

// TGoCacheUpsertBulk is the builder for "upsert"-ing
// a bulk of TGoCache nodes.
type TGoCacheUpsertBulk struct {
	create *TGoCacheCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TGoCache.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tgocache.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TGoCacheUpsertBulk) UpdateNewValues() *TGoCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tgocache.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TGoCache.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TGoCacheUpsertBulk) Ignore() *TGoCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TGoCacheUpsertBulk) DoNothing() *TGoCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TGoCacheCreateBulk.OnConflict
// documentation for more info.
func (u *TGoCacheUpsertBulk) Update(set func(*TGoCacheUpsert)) *TGoCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TGoCacheUpsert{UpdateSet: update})
	}))
	return u
}

// SetCacheKey sets the "cache_key" field.
func (u *TGoCacheUpsertBulk) SetCacheKey(v string) *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetCacheKey(v)
	})
}

// UpdateCacheKey sets the "cache_key" field to the value that was provided on create.
func (u *TGoCacheUpsertBulk) UpdateCacheKey() *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateCacheKey()
	})
}

// SetCacheValue sets the "cache_value" field.
func (u *TGoCacheUpsertBulk) SetCacheValue(v string) *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetCacheValue(v)
	})
}

// UpdateCacheValue sets the "cache_value" field to the value that was provided on create.
func (u *TGoCacheUpsertBulk) UpdateCacheValue() *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateCacheValue()
	})
}

// SetMtime sets the "mtime" field.
func (u *TGoCacheUpsertBulk) SetMtime(v time.Time) *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *TGoCacheUpsertBulk) UpdateMtime() *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateMtime()
	})
}

// SetCtime sets the "ctime" field.
func (u *TGoCacheUpsertBulk) SetCtime(v time.Time) *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *TGoCacheUpsertBulk) UpdateCtime() *TGoCacheUpsertBulk {
	return u.Update(func(s *TGoCacheUpsert) {
		s.UpdateCtime()
	})
}

// Exec executes the query.
func (u *TGoCacheUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TGoCacheCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TGoCacheCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TGoCacheUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
