// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"toucan-leaderboard/ent/tuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TUserCreate is the builder for creating a TUser entity.
type TUserCreate struct {
	config
	mutation *TUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWalletPub sets the "wallet_pub" field.
func (tc *TUserCreate) SetWalletPub(s string) *TUserCreate {
	tc.mutation.SetWalletPub(s)
	return tc
}

// SetWalletType sets the "wallet_type" field.
func (tc *TUserCreate) SetWalletType(s string) *TUserCreate {
	tc.mutation.SetWalletType(s)
	return tc
}

// SetUname sets the "uname" field.
func (tc *TUserCreate) SetUname(s string) *TUserCreate {
	tc.mutation.SetUname(s)
	return tc
}

// SetFace sets the "face" field.
func (tc *TUserCreate) SetFace(s string) *TUserCreate {
	tc.mutation.SetFace(s)
	return tc
}

// SetGender sets the "gender" field.
func (tc *TUserCreate) SetGender(b bool) *TUserCreate {
	tc.mutation.SetGender(b)
	return tc
}

// SetTwitter sets the "twitter" field.
func (tc *TUserCreate) SetTwitter(s string) *TUserCreate {
	tc.mutation.SetTwitter(s)
	return tc
}

// SetEmail sets the "email" field.
func (tc *TUserCreate) SetEmail(s string) *TUserCreate {
	tc.mutation.SetEmail(s)
	return tc
}

// SetAbout sets the "about" field.
func (tc *TUserCreate) SetAbout(s string) *TUserCreate {
	tc.mutation.SetAbout(s)
	return tc
}

// SetLastLoginTime sets the "last_login_time" field.
func (tc *TUserCreate) SetLastLoginTime(t time.Time) *TUserCreate {
	tc.mutation.SetLastLoginTime(t)
	return tc
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (tc *TUserCreate) SetNillableLastLoginTime(t *time.Time) *TUserCreate {
	if t != nil {
		tc.SetLastLoginTime(*t)
	}
	return tc
}

// SetMtime sets the "mtime" field.
func (tc *TUserCreate) SetMtime(t time.Time) *TUserCreate {
	tc.mutation.SetMtime(t)
	return tc
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (tc *TUserCreate) SetNillableMtime(t *time.Time) *TUserCreate {
	if t != nil {
		tc.SetMtime(*t)
	}
	return tc
}

// SetCtime sets the "ctime" field.
func (tc *TUserCreate) SetCtime(t time.Time) *TUserCreate {
	tc.mutation.SetCtime(t)
	return tc
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (tc *TUserCreate) SetNillableCtime(t *time.Time) *TUserCreate {
	if t != nil {
		tc.SetCtime(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TUserCreate) SetID(u uint64) *TUserCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TUserMutation object of the builder.
func (tc *TUserCreate) Mutation() *TUserMutation {
	return tc.mutation
}

// Save creates the TUser in the database.
func (tc *TUserCreate) Save(ctx context.Context) (*TUser, error) {
	var (
		err  error
		node *TUser
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TUserCreate) SaveX(ctx context.Context) *TUser {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TUserCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TUserCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TUserCreate) defaults() {
	if _, ok := tc.mutation.LastLoginTime(); !ok {
		v := tuser.DefaultLastLoginTime()
		tc.mutation.SetLastLoginTime(v)
	}
	if _, ok := tc.mutation.Mtime(); !ok {
		v := tuser.DefaultMtime()
		tc.mutation.SetMtime(v)
	}
	if _, ok := tc.mutation.Ctime(); !ok {
		v := tuser.DefaultCtime()
		tc.mutation.SetCtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TUserCreate) check() error {
	if _, ok := tc.mutation.WalletPub(); !ok {
		return &ValidationError{Name: "wallet_pub", err: errors.New(`ent: missing required field "TUser.wallet_pub"`)}
	}
	if _, ok := tc.mutation.WalletType(); !ok {
		return &ValidationError{Name: "wallet_type", err: errors.New(`ent: missing required field "TUser.wallet_type"`)}
	}
	if _, ok := tc.mutation.Uname(); !ok {
		return &ValidationError{Name: "uname", err: errors.New(`ent: missing required field "TUser.uname"`)}
	}
	if _, ok := tc.mutation.Face(); !ok {
		return &ValidationError{Name: "face", err: errors.New(`ent: missing required field "TUser.face"`)}
	}
	if _, ok := tc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "TUser.gender"`)}
	}
	if _, ok := tc.mutation.Twitter(); !ok {
		return &ValidationError{Name: "twitter", err: errors.New(`ent: missing required field "TUser.twitter"`)}
	}
	if _, ok := tc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "TUser.email"`)}
	}
	if _, ok := tc.mutation.About(); !ok {
		return &ValidationError{Name: "about", err: errors.New(`ent: missing required field "TUser.about"`)}
	}
	if _, ok := tc.mutation.LastLoginTime(); !ok {
		return &ValidationError{Name: "last_login_time", err: errors.New(`ent: missing required field "TUser.last_login_time"`)}
	}
	if _, ok := tc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "TUser.mtime"`)}
	}
	if _, ok := tc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "TUser.ctime"`)}
	}
	return nil
}

func (tc *TUserCreate) sqlSave(ctx context.Context) (*TUser, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tc *TUserCreate) createSpec() (*TUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TUser{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tuser.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.WalletPub(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuser.FieldWalletPub,
		})
		_node.WalletPub = value
	}
	if value, ok := tc.mutation.WalletType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuser.FieldWalletType,
		})
		_node.WalletType = value
	}
	if value, ok := tc.mutation.Uname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuser.FieldUname,
		})
		_node.Uname = value
	}
	if value, ok := tc.mutation.Face(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuser.FieldFace,
		})
		_node.Face = value
	}
	if value, ok := tc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tuser.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := tc.mutation.Twitter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuser.FieldTwitter,
		})
		_node.Twitter = value
	}
	if value, ok := tc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuser.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := tc.mutation.About(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuser.FieldAbout,
		})
		_node.About = value
	}
	if value, ok := tc.mutation.LastLoginTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tuser.FieldLastLoginTime,
		})
		_node.LastLoginTime = value
	}
	if value, ok := tc.mutation.Mtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tuser.FieldMtime,
		})
		_node.Mtime = value
	}
	if value, ok := tc.mutation.Ctime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tuser.FieldCtime,
		})
		_node.Ctime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TUser.Create().
//		SetWalletPub(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TUserUpsert) {
//			SetWalletPub(v+v).
//		}).
//		Exec(ctx)
func (tc *TUserCreate) OnConflict(opts ...sql.ConflictOption) *TUserUpsertOne {
	tc.conflict = opts
	return &TUserUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TUserCreate) OnConflictColumns(columns ...string) *TUserUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TUserUpsertOne{
		create: tc,
	}
}

type (
	// TUserUpsertOne is the builder for "upsert"-ing
	//  one TUser node.
	TUserUpsertOne struct {
		create *TUserCreate
	}

	// TUserUpsert is the "OnConflict" setter.
	TUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetWalletPub sets the "wallet_pub" field.
func (u *TUserUpsert) SetWalletPub(v string) *TUserUpsert {
	u.Set(tuser.FieldWalletPub, v)
	return u
}

// UpdateWalletPub sets the "wallet_pub" field to the value that was provided on create.
func (u *TUserUpsert) UpdateWalletPub() *TUserUpsert {
	u.SetExcluded(tuser.FieldWalletPub)
	return u
}

// SetWalletType sets the "wallet_type" field.
func (u *TUserUpsert) SetWalletType(v string) *TUserUpsert {
	u.Set(tuser.FieldWalletType, v)
	return u
}

// UpdateWalletType sets the "wallet_type" field to the value that was provided on create.
func (u *TUserUpsert) UpdateWalletType() *TUserUpsert {
	u.SetExcluded(tuser.FieldWalletType)
	return u
}

// SetUname sets the "uname" field.
func (u *TUserUpsert) SetUname(v string) *TUserUpsert {
	u.Set(tuser.FieldUname, v)
	return u
}

// UpdateUname sets the "uname" field to the value that was provided on create.
func (u *TUserUpsert) UpdateUname() *TUserUpsert {
	u.SetExcluded(tuser.FieldUname)
	return u
}

// SetFace sets the "face" field.
func (u *TUserUpsert) SetFace(v string) *TUserUpsert {
	u.Set(tuser.FieldFace, v)
	return u
}

// UpdateFace sets the "face" field to the value that was provided on create.
func (u *TUserUpsert) UpdateFace() *TUserUpsert {
	u.SetExcluded(tuser.FieldFace)
	return u
}

// SetGender sets the "gender" field.
func (u *TUserUpsert) SetGender(v bool) *TUserUpsert {
	u.Set(tuser.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *TUserUpsert) UpdateGender() *TUserUpsert {
	u.SetExcluded(tuser.FieldGender)
	return u
}

// SetTwitter sets the "twitter" field.
func (u *TUserUpsert) SetTwitter(v string) *TUserUpsert {
	u.Set(tuser.FieldTwitter, v)
	return u
}

// UpdateTwitter sets the "twitter" field to the value that was provided on create.
func (u *TUserUpsert) UpdateTwitter() *TUserUpsert {
	u.SetExcluded(tuser.FieldTwitter)
	return u
}

// SetEmail sets the "email" field.
func (u *TUserUpsert) SetEmail(v string) *TUserUpsert {
	u.Set(tuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TUserUpsert) UpdateEmail() *TUserUpsert {
	u.SetExcluded(tuser.FieldEmail)
	return u
}

// SetAbout sets the "about" field.
func (u *TUserUpsert) SetAbout(v string) *TUserUpsert {
	u.Set(tuser.FieldAbout, v)
	return u
}

// UpdateAbout sets the "about" field to the value that was provided on create.
func (u *TUserUpsert) UpdateAbout() *TUserUpsert {
	u.SetExcluded(tuser.FieldAbout)
	return u
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *TUserUpsert) SetLastLoginTime(v time.Time) *TUserUpsert {
	u.Set(tuser.FieldLastLoginTime, v)
	return u
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *TUserUpsert) UpdateLastLoginTime() *TUserUpsert {
	u.SetExcluded(tuser.FieldLastLoginTime)
	return u
}

// SetMtime sets the "mtime" field.
func (u *TUserUpsert) SetMtime(v time.Time) *TUserUpsert {
	u.Set(tuser.FieldMtime, v)
	return u
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *TUserUpsert) UpdateMtime() *TUserUpsert {
	u.SetExcluded(tuser.FieldMtime)
	return u
}

// SetCtime sets the "ctime" field.
func (u *TUserUpsert) SetCtime(v time.Time) *TUserUpsert {
	u.Set(tuser.FieldCtime, v)
	return u
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *TUserUpsert) UpdateCtime() *TUserUpsert {
	u.SetExcluded(tuser.FieldCtime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TUserUpsertOne) UpdateNewValues() *TUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TUserUpsertOne) Ignore() *TUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TUserUpsertOne) DoNothing() *TUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TUserCreate.OnConflict
// documentation for more info.
func (u *TUserUpsertOne) Update(set func(*TUserUpsert)) *TUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetWalletPub sets the "wallet_pub" field.
func (u *TUserUpsertOne) SetWalletPub(v string) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetWalletPub(v)
	})
}

// UpdateWalletPub sets the "wallet_pub" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateWalletPub() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateWalletPub()
	})
}

// SetWalletType sets the "wallet_type" field.
func (u *TUserUpsertOne) SetWalletType(v string) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetWalletType(v)
	})
}

// UpdateWalletType sets the "wallet_type" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateWalletType() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateWalletType()
	})
}

// SetUname sets the "uname" field.
func (u *TUserUpsertOne) SetUname(v string) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetUname(v)
	})
}

// UpdateUname sets the "uname" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateUname() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateUname()
	})
}

// SetFace sets the "face" field.
func (u *TUserUpsertOne) SetFace(v string) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetFace(v)
	})
}

// UpdateFace sets the "face" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateFace() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateFace()
	})
}

// SetGender sets the "gender" field.
func (u *TUserUpsertOne) SetGender(v bool) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateGender() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateGender()
	})
}

// SetTwitter sets the "twitter" field.
func (u *TUserUpsertOne) SetTwitter(v string) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetTwitter(v)
	})
}

// UpdateTwitter sets the "twitter" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateTwitter() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateTwitter()
	})
}

// SetEmail sets the "email" field.
func (u *TUserUpsertOne) SetEmail(v string) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateEmail() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateEmail()
	})
}

// SetAbout sets the "about" field.
func (u *TUserUpsertOne) SetAbout(v string) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetAbout(v)
	})
}

// UpdateAbout sets the "about" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateAbout() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateAbout()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *TUserUpsertOne) SetLastLoginTime(v time.Time) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateLastLoginTime() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// SetMtime sets the "mtime" field.
func (u *TUserUpsertOne) SetMtime(v time.Time) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateMtime() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateMtime()
	})
}

// SetCtime sets the "ctime" field.
func (u *TUserUpsertOne) SetCtime(v time.Time) *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *TUserUpsertOne) UpdateCtime() *TUserUpsertOne {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateCtime()
	})
}

// Exec executes the query.
func (u *TUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TUserUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TUserUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TUserCreateBulk is the builder for creating many TUser entities in bulk.
type TUserCreateBulk struct {
	config
	builders []*TUserCreate
	conflict []sql.ConflictOption
}

// Save creates the TUser entities in the database.
func (tcb *TUserCreateBulk) Save(ctx context.Context) ([]*TUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*TUser, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TUserCreateBulk) SaveX(ctx context.Context) []*TUser {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TUserCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TUserUpsert) {
//			SetWalletPub(v+v).
//		}).
//		Exec(ctx)
func (tcb *TUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *TUserUpsertBulk {
	tcb.conflict = opts
	return &TUserUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TUserCreateBulk) OnConflictColumns(columns ...string) *TUserUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TUserUpsertBulk{
		create: tcb,
	}
}

// TUserUpsertBulk is the builder for "upsert"-ing
// a bulk of TUser nodes.
type TUserUpsertBulk struct {
	create *TUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TUserUpsertBulk) UpdateNewValues() *TUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tuser.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TUserUpsertBulk) Ignore() *TUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TUserUpsertBulk) DoNothing() *TUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TUserCreateBulk.OnConflict
// documentation for more info.
func (u *TUserUpsertBulk) Update(set func(*TUserUpsert)) *TUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetWalletPub sets the "wallet_pub" field.
func (u *TUserUpsertBulk) SetWalletPub(v string) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetWalletPub(v)
	})
}

// UpdateWalletPub sets the "wallet_pub" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateWalletPub() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateWalletPub()
	})
}

// SetWalletType sets the "wallet_type" field.
func (u *TUserUpsertBulk) SetWalletType(v string) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetWalletType(v)
	})
}

// UpdateWalletType sets the "wallet_type" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateWalletType() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateWalletType()
	})
}

// SetUname sets the "uname" field.
func (u *TUserUpsertBulk) SetUname(v string) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetUname(v)
	})
}

// UpdateUname sets the "uname" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateUname() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateUname()
	})
}

// SetFace sets the "face" field.
func (u *TUserUpsertBulk) SetFace(v string) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetFace(v)
	})
}

// UpdateFace sets the "face" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateFace() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateFace()
	})
}

// SetGender sets the "gender" field.
func (u *TUserUpsertBulk) SetGender(v bool) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateGender() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateGender()
	})
}

// SetTwitter sets the "twitter" field.
func (u *TUserUpsertBulk) SetTwitter(v string) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetTwitter(v)
	})
}

// UpdateTwitter sets the "twitter" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateTwitter() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateTwitter()
	})
}

// SetEmail sets the "email" field.
func (u *TUserUpsertBulk) SetEmail(v string) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateEmail() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateEmail()
	})
}

// SetAbout sets the "about" field.
func (u *TUserUpsertBulk) SetAbout(v string) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetAbout(v)
	})
}

// UpdateAbout sets the "about" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateAbout() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateAbout()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *TUserUpsertBulk) SetLastLoginTime(v time.Time) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateLastLoginTime() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// SetMtime sets the "mtime" field.
func (u *TUserUpsertBulk) SetMtime(v time.Time) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateMtime() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateMtime()
	})
}

// SetCtime sets the "ctime" field.
func (u *TUserUpsertBulk) SetCtime(v time.Time) *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *TUserUpsertBulk) UpdateCtime() *TUserUpsertBulk {
	return u.Update(func(s *TUserUpsert) {
		s.UpdateCtime()
	})
}

// Exec executes the query.
func (u *TUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
