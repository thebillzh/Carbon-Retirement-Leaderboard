// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.12
// source: api/main/v1/main.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMainGetAvailableNFTList = "/main.v1.Main/GetAvailableNFTList"
const OperationMainGetLeaderboard = "/main.v1.Main/GetLeaderboard"
const OperationMainPing = "/main.v1.Main/Ping"

type MainHTTPServer interface {
	GetAvailableNFTList(context.Context, *GetAvailableNFTListReq) (*GetAvailableNFTListResp, error)
	GetLeaderboard(context.Context, *GetLeaderboardReq) (*GetLeaderboardResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
}

func RegisterMainHTTPServer(s *http.Server, srv MainHTTPServer) {
	r := s.Route("/")
	r.GET("/toucan-leaderboard/service-main/v1/ping", _Main_Ping0_HTTP_Handler(srv))
	r.GET("/toucan-leaderboard/service-main/v1/getLeaderboard", _Main_GetLeaderboard0_HTTP_Handler(srv))
	r.GET("/toucan-leaderboard/service-main/v1/getAvailableNFTList", _Main_GetAvailableNFTList0_HTTP_Handler(srv))
}

func _Main_Ping0_HTTP_Handler(srv MainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMainPing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*PingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingResp)
		return ctx.Result(200, reply)
	}
}

func _Main_GetLeaderboard0_HTTP_Handler(srv MainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLeaderboardReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMainGetLeaderboard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLeaderboard(ctx, req.(*GetLeaderboardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLeaderboardResp)
		return ctx.Result(200, reply)
	}
}

func _Main_GetAvailableNFTList0_HTTP_Handler(srv MainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAvailableNFTListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMainGetAvailableNFTList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAvailableNFTList(ctx, req.(*GetAvailableNFTListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAvailableNFTListResp)
		return ctx.Result(200, reply)
	}
}

type MainHTTPClient interface {
	GetAvailableNFTList(ctx context.Context, req *GetAvailableNFTListReq, opts ...http.CallOption) (rsp *GetAvailableNFTListResp, err error)
	GetLeaderboard(ctx context.Context, req *GetLeaderboardReq, opts ...http.CallOption) (rsp *GetLeaderboardResp, err error)
	Ping(ctx context.Context, req *PingReq, opts ...http.CallOption) (rsp *PingResp, err error)
}

type MainHTTPClientImpl struct {
	cc *http.Client
}

func NewMainHTTPClient(client *http.Client) MainHTTPClient {
	return &MainHTTPClientImpl{client}
}

func (c *MainHTTPClientImpl) GetAvailableNFTList(ctx context.Context, in *GetAvailableNFTListReq, opts ...http.CallOption) (*GetAvailableNFTListResp, error) {
	var out GetAvailableNFTListResp
	pattern := "/toucan-leaderboard/service-main/v1/getAvailableNFTList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMainGetAvailableNFTList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MainHTTPClientImpl) GetLeaderboard(ctx context.Context, in *GetLeaderboardReq, opts ...http.CallOption) (*GetLeaderboardResp, error) {
	var out GetLeaderboardResp
	pattern := "/toucan-leaderboard/service-main/v1/getLeaderboard"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMainGetLeaderboard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MainHTTPClientImpl) Ping(ctx context.Context, in *PingReq, opts ...http.CallOption) (*PingResp, error) {
	var out PingResp
	pattern := "/toucan-leaderboard/service-main/v1/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMainPing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
